// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Project_Forum.Models;

#nullable disable

namespace Project_Forum.Migrations.ForumProject
{
    [DbContext(typeof(ForumProjectContext))]
    partial class ForumProjectContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Project_Forum.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AvatarFilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("('0001-01-01T00:00:00.0000000')");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedEmail" }, "EmailIndex");

                    b.HasIndex(new[] { "NormalizedUserName" }, "UserNameIndex")
                        .IsUnique()
                        .HasFilter("([NormalizedUserName] IS NOT NULL)");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Project_Forum.Models.Post", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("postID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("PostContent")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("post_content");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("userID");

                    b.HasKey("PostId")
                        .HasName("PK__Posts__DD0C73BA42313553");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Project_Forum.Models.PostTag", b =>
                {
                    b.Property<int>("PostId")
                        .HasColumnType("int")
                        .HasColumnName("postID");

                    b.Property<string>("TagName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("tag_name");

                    b.HasIndex("PostId");

                    b.HasIndex("TagName");

                    b.ToTable("PostTags");
                });

            modelBuilder.Entity("Project_Forum.Models.PostUpvote", b =>
                {
                    b.Property<int>("RespondUpvotesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RespondUpvotesID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RespondUpvotesId"));

                    b.Property<int>("PostId")
                        .HasColumnType("int")
                        .HasColumnName("postID");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("userID");

                    b.HasKey("RespondUpvotesId")
                        .HasName("PK__PostUpvo__99FD00505E27DDD4");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("PostUpvotes");
                });

            modelBuilder.Entity("Project_Forum.Models.Respond", b =>
                {
                    b.Property<int>("RespondId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("respondID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RespondId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int>("PostId")
                        .HasColumnType("int")
                        .HasColumnName("postID");

                    b.Property<string>("RepondContent")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("repond_content");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("userID");

                    b.HasKey("RespondId")
                        .HasName("PK__Responds__BF073EE303BBCE66");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Responds");
                });

            modelBuilder.Entity("Project_Forum.Models.RespondUpvote", b =>
                {
                    b.Property<int>("RespondUpvotesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RespondUpvotesID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RespondUpvotesId"));

                    b.Property<int>("RespondId")
                        .HasColumnType("int")
                        .HasColumnName("respondID");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("userID");

                    b.HasKey("RespondUpvotesId")
                        .HasName("PK__RespondU__99FD005014F8A6F2");

                    b.HasIndex("RespondId");

                    b.HasIndex("UserId");

                    b.ToTable("RespondUpvotes");
                });

            modelBuilder.Entity("Project_Forum.Models.Tag", b =>
                {
                    b.Property<string>("TagName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("tag_name");

                    b.HasKey("TagName")
                        .HasName("PK__Tags__E298655D73145147");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Project_Forum.Models.Post", b =>
                {
                    b.HasOne("Project_Forum.Models.ApplicationUser", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserPost");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Project_Forum.Models.PostTag", b =>
                {
                    b.HasOne("Project_Forum.Models.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PostTag_Post");

                    b.HasOne("Project_Forum.Models.Tag", "TagNameNavigation")
                        .WithMany()
                        .HasForeignKey("TagName")
                        .HasConstraintName("FK_PostTag_Tag");

                    b.Navigation("Post");

                    b.Navigation("TagNameNavigation");
                });

            modelBuilder.Entity("Project_Forum.Models.PostUpvote", b =>
                {
                    b.HasOne("Project_Forum.Models.Post", "Post")
                        .WithMany("PostUpvotes")
                        .HasForeignKey("PostId")
                        .IsRequired()
                        .HasConstraintName("FK_PostUpvotes_Post");

                    b.HasOne("Project_Forum.Models.ApplicationUser", "User")
                        .WithMany("PostUpvotes")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_PostUpvotes_User");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Project_Forum.Models.Respond", b =>
                {
                    b.HasOne("Project_Forum.Models.Post", "Post")
                        .WithMany("Responds")
                        .HasForeignKey("PostId")
                        .IsRequired()
                        .HasConstraintName("FK_RespondPost");

                    b.HasOne("Project_Forum.Models.ApplicationUser", "User")
                        .WithMany("Responds")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserRespond");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Project_Forum.Models.RespondUpvote", b =>
                {
                    b.HasOne("Project_Forum.Models.Respond", "Respond")
                        .WithMany("RespondUpvotes")
                        .HasForeignKey("RespondId")
                        .IsRequired()
                        .HasConstraintName("FK_RespondUpvotes_Respond");

                    b.HasOne("Project_Forum.Models.ApplicationUser", "User")
                        .WithMany("RespondUpvotes")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_RepondUpvotes_User");

                    b.Navigation("Respond");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Project_Forum.Models.ApplicationUser", b =>
                {
                    b.Navigation("PostUpvotes");

                    b.Navigation("Posts");

                    b.Navigation("RespondUpvotes");

                    b.Navigation("Responds");
                });

            modelBuilder.Entity("Project_Forum.Models.Post", b =>
                {
                    b.Navigation("PostUpvotes");

                    b.Navigation("Responds");
                });

            modelBuilder.Entity("Project_Forum.Models.Respond", b =>
                {
                    b.Navigation("RespondUpvotes");
                });
#pragma warning restore 612, 618
        }
    }
}
