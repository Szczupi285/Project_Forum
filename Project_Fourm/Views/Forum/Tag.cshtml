@model PostCompositeModel

@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    <div class="display-post">
        <div class="filters">
            @using (Html.BeginForm("Tag", "Forum", FormMethod.Get))
            {
                // retrives previous tag so changing filter won't change tag we're currently on to empty string
                @Html.Hidden("tag", ViewContext.HttpContext.Request.Query["tag"])
                <div class="choose-hour-filter">
                    <label class="radio-button-label">
                        @Html.RadioButtonFor(model => model.FilterPostsModel.SelectedTimeFilter, TimeFilter.sixHours,
                new {@class = "radio-button-style"})
                        <span class="label-text">6h</span>
                    </label>
                    <label class="radio-button-label">
                        @Html.RadioButtonFor(model => model.FilterPostsModel.SelectedTimeFilter, TimeFilter.twelveHours,
                new {@class = "radio-button-style"})
                        <span class="label-text">12h</span>
                    </label>
                    <label class="radio-button-label">
                        @Html.RadioButtonFor(model => model.FilterPostsModel.SelectedTimeFilter, TimeFilter.day,
                new {@class = "radio-button-style"})
                        <span class="label-text">day</span>
                    </label>
                    <label class="radio-button-label">
                        @Html.RadioButtonFor(model => model.FilterPostsModel.SelectedTimeFilter, TimeFilter.week,
                new {@class = "radio-button-style"})
                        <span class="label-text">week</span>
                    </label>
                    <label class="radio-button-label">
                        @Html.RadioButtonFor(model => model.FilterPostsModel.SelectedTimeFilter, TimeFilter.month,
                new {@class = "radio-button-style"})
                        <span class="label-text">month</span>
                    </label>
                </div>

            }
            <form method="get" action="@Url.Action("Tag", "Forum")">
                <div class="search-container">
                    <input type="text" id="search-input" name="tag" placeholder="Choose tag...">
                    <button type="submit" class="search-button" value="search">
                        <i class="material-icons">search</i>
                    </button>
                </div>
            </form>
        </div>

        

        <div class="display-post-container">
            @foreach (var postDisplay in Model.PostDisplayContents)
            {
                <div class="single-post-display">
                    <p class="post-username">@postDisplay.Item1.Username</p>
                    <p class="post-content">@postDisplay.Item1.Content</p>
                    <p class="post-creation-date">@postDisplay.Item1.CreationDate</p>
                    <input type="checkbox" class="post-upvote-checkbox" data-postid="@postDisplay.Item1.PostId">
                    <i id="post-upvote-favorite" class="material-icons">favorite</i>
                    <span class="post-upvote-count">@postDisplay.Item1.UpvotesCount</span>

                    @if (Model.CurrentUserId == postDisplay.Item1.UserId)
                    {
                        <form method="POST" asp-controller="Forum" asp-action="DeletePost">
                            <input type="hidden" name="postId" value="@postDisplay.Item1.PostId">
                            <button type="submit" name="action" id="post-delete-button" value="deletePost">
                                <i class="material-icons">delete</i>
                            </button>
                        </form>

                        <button type="submit" name="action" class="edit-button"
                        data-contentid="@postDisplay.Item1.PostId"
                        data-contenttype="Post" value="reportPost">
                            <i class="material-icons">edit</i>
                        </button>
                    }
                    else
                    {
                        <button type="submit" name="action" class="post-report-button"
                        data-contentid="@postDisplay.Item1.PostId"
                        data-contenttype="post" value="reportPost">
                            <i class="material-icons">flag</i>
                        </button>
                    }
                </div>

                <div class="send-respond-form">
                    <form method="POST" asp-controller="Forum" asp-action="CreateRespond">
                        <input type="hidden" name="postId" value="@postDisplay.Item1.PostId">
                        <textarea id="respond-message" placeholder="Respond..." asp-for="RespondModel.RepondContent"></textarea>
                        <button type="submit" id="send-respond-button" value="x">
                            <i class="material-icons">send</i>
                        </button>
                    </form>
                </div>



                @foreach (var respondDisplay in postDisplay.Item2)
                {

                    <div class="single-respond-display">
                        <p class="respond-username">@respondDisplay.Username</p>
                        <p class="respond-content">@respondDisplay.Content</p>
                        <p class="respond-creation-date">@respondDisplay.CreationDate</p>
                        <input type="checkbox" class="respond-upvote-checkbox" data-respondid="@respondDisplay.RespondId">
                        <i id="respond-upvote-favorite" class="material-icons">favorite</i>
                        <span class="respond-upvote-count">@respondDisplay.UpvotesCount</span>


                        @if (Model.CurrentUserId == respondDisplay.UserId)
                        {
                            <form method="POST" asp-controller="Forum" asp-action="DeleteRespond">
                                <input type="hidden" name="respondId" value="@respondDisplay.RespondId">
                                <button type="submit" name="action" id="respond-delete-button" value="deleteRespond">
                                    <i class="material-icons">delete</i>
                                </button>
                            </form>

                            <button type="submit" name="action" class="edit-button"
                        data-contentid="@respondDisplay.RespondId"
                        data-contenttype="Respond" value="reportRespond">
                                <i class="material-icons">edit</i>
                            </button>
                        }
                        else
                        {
                            <input type="hidden" name="respondId" value="@respondDisplay.RespondId">
                            <button type="submit" name="action" class="respond-report-button"
                        data-contentid="@respondDisplay.RespondId"
                        data-contenttype="respond" value="reportRespond">
                                <i class="material-icons">flag</i>
                            </button>
                        }
                    </div>
                }
            }
        </div>


    </div>
}
@section scripts {
    <!--increment/decrement the post-upvote-count after post-upvote-checkbox state change-->
    <!--It also sends postId to ManageUpvote action in Controller-->
    <script>
        $(document).ready(function () {
            $('.post-upvote-checkbox').change(function () {

                var postid = $(this).data('postid');
                var icon = document.getElementById('post-upvote-favorite');

                var countNumElement = $(this).closest('.single-post-display').find('.post-upvote-count');

                var isChecked = $(this).prop('checked');

                // Increment or decrement the count based on the checkbox state
                var newCount = parseInt(countNumElement.text()) + (isChecked ? 1 : -1);


                // Update the displayed count
                countNumElement.text(newCount);

                // send postId to ManageUpvote action
                $.ajax({
                    url: '@Url.Action("ManageUpvote", "Forum")',
                    type: 'POST',
                    data: { postId: postid },
                    success: function (response) {
                        console.log(response);

                    },
                    error: function (error) {
                        console.error(error);
                    }
                });
            });
        });
    </script>
    <!--
    stores state of post-upvote-checkbox in local storage
    Local storage is used because of the ammount of records that will be stored in PostUpvotes
    and efficency of getting records for certain (user, post) pair from such a big dataset

    Note: consider method to clear data storage and get values from db in some scenarios.
    For example store information about all checkboxes user loaded and expire them after a day.
    Then while loading page check if user store information about loaded posts and for those post
    that he doesn't store information for, get value of PostUpvotes and change the state of checkbox based
    on that information'
    -->
    <script>
        $(document).ready(function () {
            $('.post-upvote-checkbox').change(function () {
                var postid = $(this).data('postid');
                var isChecked = $(this).prop('checked');

                // Store the checkbox state in local storage
                localStorage.setItem('PC' + postid, isChecked);

                var icon = document.getElementById('post-upvote-favorite');
                var countNumElement = $(this).closest('.single-post-display').find('.post-upvote-count');
            });

            // Load the state of checkboxes from local storage on page load
            $('.post-upvote-checkbox').each(function () {
                var postid = $(this).data('postid');
                var isChecked = localStorage.getItem('PC' + postid) === 'true';
                $(this).prop('checked', isChecked);
            });
        });
    </script>





    <!--increment/decrement the respond-upvote-count after respond-upvote-checkbox state change-->
    <!--It also sends respondId to ManageRespondUpvote action in Controller-->
    <script>
        $(document).ready(function () {
            $('.respond-upvote-checkbox').change(function () {

                var respondid = $(this).data('respondid');
                var icon = document.getElementById('respond-upvote-favorite');

                var countNumElement = $(this).closest('.single-respond-display').find('.respond-upvote-count');

                var isChecked = $(this).prop('checked');

                // Increment or decrement the count based on the checkbox state
                var newCount = parseInt(countNumElement.text()) + (isChecked ? 1 : -1);


                // Update the displayed count
                countNumElement.text(newCount);

                // send respondId to ManageUpvote action
                $.ajax({
                    url: '@Url.Action("ManageRespondUpvote", "Forum")',
                    type: 'POST',
                    data: { respondId: respondid },
                    success: function (response) {
                        console.log(response);

                    },
                    error: function (error) {
                        console.error(error);
                    }
                });
            });
        });
    </script>
    <!--
    stores state of respond-upvote-checkbox in local storage
    Local storage is used because of the ammount of records that will be stored in PostUpvotes
    and efficency of getting records for certain (user, post) pair from such a big dataset

    Note: consider method to clear data storage and get values from db in some scenarios.
    For example store information about all checkboxes user loaded and expire them after a day.
    Then while loading page check if user store information about loaded posts and for those post
    that he doesn't store information for, get value of PostUpvotes and change the state of checkbox based
    on that information'
    -->
    <script>
        $(document).ready(function () {
            $('.respond-upvote-checkbox').change(function () {
                var respondid = $(this).data('respondid');
                var isChecked = $(this).prop('checked');

                // Store the checkbox state in local storage
                localStorage.setItem('RC' + respondid, isChecked);

                var icon = document.getElementById('respond-upvote-favorite');
                var countNumElement = $(this).closest('.single-respond-display').find('.respond-upvote-count');
            });

            // Load the state of checkboxes from local storage on page load
            $('.respond-upvote-checkbox').each(function () {
                var respondid = $(this).data('respondid');
                var isChecked = localStorage.getItem('RC' + respondid) === 'true';
                $(this).prop('checked', isChecked);
            });
        });
    </script>



    <!--
        Open and closes modal, pass the value contentid and contenttype to textarea attributes inside of modal.
        Upon clicking retrives vvalues and text from textarea and sends it to Report method in Forum controller
    -->

    <script>
        const openModalButton = document.querySelectorAll('.post-report-button');
        const openModalButton1 = document.querySelectorAll('.respond-report-button');
        const modal = document.getElementById('modal');
        const reportDetailsTextarea = modal.querySelector('textarea');



        openModalButton.forEach(button => {
            button.addEventListener('click', () => {

                const postId = button.getAttribute('data-contentid');

                reportDetailsTextarea.setAttribute('data-contentid', postId);
                reportDetailsTextarea.setAttribute('data-contenttype', "Post");

                modal.showModal();
            });
        });

        openModalButton1.forEach(button => {
            button.addEventListener('click', () => {

                const respondId = button.getAttribute('data-contentid');

                reportDetailsTextarea.setAttribute('data-contentid', respondId);
                reportDetailsTextarea.setAttribute('data-contenttype', "Respond");

                modal.showModal();
            });
        });


        // Close the modal when the button inside the modal is clicked
        const sendReportDetailsButton = document.getElementById('send-report-details');
        sendReportDetailsButton.addEventListener('click', () => {
            const contentId = reportDetailsTextarea.getAttribute('data-contentid');
            const contentType = reportDetailsTextarea.getAttribute('data-contenttype');
            const reportReason = reportDetailsTextarea.value;



            $.ajax({
                url: '@Url.Action("Report", "Forum")',
                type: 'POST',
                data: { contentId: contentId, reportReason: reportReason, contentType: contentType },
                success: function (response) {
                    console.log(response);
                },
                error: function (error) {
                    console.error(error);
                }
            });


            modal.close();
        });
    </script>


    <!--
        Open and closes modal, pass the value contentid and contenttype to textarea attributes inside of modal.
        Upon clicking retrives values and text from textarea and sends it to Edit method in Forum controller
    -->
    <script>
        // Wait for the document to be ready
        document.addEventListener("DOMContentLoaded", function () {
            // Get all elements with class "edit-button"
            var editButtons = document.querySelectorAll(".edit-button");
            // Get the modal element by ID
            var modal = document.getElementById("edit-modal");
            const editTextarea = modal.querySelector('textarea');

            // Loop through each edit button
            editButtons.forEach(function (button) {
                // Add a click event listener to each edit button
                button.addEventListener("click", function () {
                    const Id = button.getAttribute('data-contentid');
                    const contentType = button.getAttribute('data-contenttype')

                    const nearestContent = contentType === 'Post' ?
                        button.closest('.single-post-display').querySelector('.post-content') :
                        button.closest('.single-respond-display').querySelector('.respond-content');
                    editTextarea.value = nearestContent ? nearestContent.textContent : '';

                    editTextarea.setAttribute('data-contentid', Id);
                    editTextarea.setAttribute('data-contenttype', contentType);

                    // Open the modal
                    modal.showModal();
                });
            });

            // Close the modal when the button inside the modal is clicked
            const sendReportDetailsButton = document.getElementById('edit-button');
            sendReportDetailsButton.addEventListener('click', () => {
                const contentId = editTextarea.getAttribute('data-contentid');
                const contentType = editTextarea.getAttribute('data-contenttype');
                const newContent = editTextarea.value;

                $.ajax({
                    url: '@Url.Action("Edit", "Forum")',
                    type: 'PUT',
                    data: { contentId: contentId, newContent: newContent, contentType: contentType },
                    success: function (response) {
                        console.log(response);
                        // reload page after edit
                        location.reload(true);
                    },
                    error: function (error) {
                        console.error(error);
                    }
                });

                modal.close();
            });
        });
    </script>

    <script>
        $(document).ready(function () {
            // This function will be executed when a radio button is chosen
            $('input[class="radio-button-style"]').change(function () {

                var form = $(this).closest('form');
                // Trigger the form submission
                form.submit();
            });
        });
    </script>

    }